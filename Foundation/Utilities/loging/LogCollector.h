//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LogCollector.h
//  @ Date : 2020/1/7
//  @ Author :
//
//

#if !defined(LOGCOLLECTOR_H)
#define LOGCOLLECTOR_H

#include "../configManager/configarray.h"
#include "../zmqWrapper/subscriber.h"
#include "utility.h"

class LogCollector
{
public:
    LogCollector();

    virtual ~LogCollector();

protected:
    void init(ConfigArray *addrToBeListened);

    virtual void onUnCategorizedLog(int logLevel, QString &msg) = 0;
    virtual void onCategorizedLog(QString &category, int logLevel, QString &msg) = 0;

private:
    void onNewLog(QJsonObject jsonObj)
    {
        QString time = jsonObj["time"].toString();
        int logLevel = jsonObj["level"].toInt();
        QString category = jsonObj["category"].toString();
        QString postfixMsg = QString("[%1] %2:%3")
                                 .arg(LogLevel::getIns().toString(logLevel))
                                 .arg(jsonObj["location"].toString())
                                 .arg(jsonObj["msg"].toString());
        QString uncategorizedMsg = QString("%1 [%2] %3").arg(time).arg(category).arg(postfixMsg);
        onUnCategorizedLog(logLevel, uncategorizedMsg);
        if (category != defaultCategoryName)
        {
            QString categorizedMsg = QString("%1 %2").arg(time).arg(postfixMsg);
            onCategorizedLog(category, logLevel, categorizedMsg);
        }
    }

protected:
    Subscriber logSubscriber;
    QString defaultCategoryName;
};

#endif    // LOGCOLLECTOR_H
